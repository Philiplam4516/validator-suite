# This is the main configuration file for the application.
# ~~~~~

application.langs="en,en-US"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="hSRsmEkK1hd]d40cS6iQ;HxoX7/hDLT@x:87IG:KoSFxAEiO=siPilyYgV>X0>ZC"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=

#default timeout for promises
promise.akka.actor.typed.timeout=60s

# Cache
cache.user.expire=300

akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = WARNING
    
    actor {
        
        deployment {

            /actions {
                router = round-robin
                nr-of-instances = 24
            }

        }
        
        retrieveBodyParserTimeout = 1 second
        
        actions-dispatcher = {
            fork-join-executor {
                parallelism-factor = 1.0
                parallelism-max = 24
            }
        }

        promises-dispatcher = {
            fork-join-executor {
                parallelism-factor = 1.0
                parallelism-max = 24
            }
        }

        websockets-dispatcher = {
            fork-join-executor {
                parallelism-factor = 1.0
                parallelism-max = 24
            }
        }

        default-dispatcher = {
            fork-join-executor {
                parallelism-factor = 1.0
                parallelism-max = 24
            }
        }
        
    }
    
}

akka.actor.deployment {
  /rdfstore {
    router = round-robin
    nr-of-instances = 1
  }
}

rdfstore-dispatcher {

  executor = "fork-join-executor"

  type = "Dispatcher"

  # this makes sure that there is only one actor at a time
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 1
     
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 3.0
     
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 1
  }

}